From 77d06d3920b202b49271ea9316899e0b4cfd18bc Mon Sep 17 00:00:00 2001
From: Rabeeh Khoury <rabeeh@solid-run.com>
Date: Wed, 30 Jul 2014 18:05:59 +0300
Subject: [PATCH] Add overscan settings under settings -> display

Adds up to 50 pixels for left,right (width) and 50 pixel for up,down (height) configuration to overcome TV overscan issues.

Signed-off-by: Rabeeh Khoury <rabeeh@solid-run.com>
---
 AndroidManifest.xml                                |   37 ++
 res/values/arrays.xml                              |   84 ++++
 res/values/strings.xml                             |   95 +++++
 res/xml/display_settings.xml                       |    5 +
 res/xml/pluggable_display_settings.xml             |   21 +
 src/com/android/settings/DisplaySettings.java      |   36 ++
 .../android/settings/PluggableDisplaySettings.java |  448 ++++++++++++++++++++
 7 files changed, 726 insertions(+)
 create mode 100644 res/xml/pluggable_display_settings.xml
 create mode 100644 src/com/android/settings/PluggableDisplaySettings.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 7c4be12..c67804e 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -621,6 +621,43 @@
                 android:resource="@id/display_settings" />
         </activity-alias>
 
+        <activity android:name="Settings$PluggableDisplaySettingsActivity"
+                android:label="@string/pluggable_display_settings"
+                android:clearTaskOnLaunch="true">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <action android:name="com.android.settings.DISPLAY_SETTINGS" />
+                <action android:name="android.settings.DISPLAY_SETTINGS" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.VOICE_LAUNCH" />
+                <category android:name="com.android.settings.SHORTCUT" />
+            </intent-filter>
+            <meta-data android:name="com.android.settings.FRAGMENT_CLASS"
+                android:value="com.android.settings.PluggableDisplaySettings" />
+            <meta-data android:name="com.android.settings.TOP_LEVEL_HEADER_ID"
+                android:resource="@id/display_settings" />
+            <meta-data android:name="com.android.settings.PARENT_FRAGMENT_TITLE"
+                android:resource="@string/display_settings" />
+            <meta-data android:name="com.android.settings.PARENT_FRAGMENT_CLASS"
+                android:value="com.android.settings.Settings$DisplaySettingsActivity" />
+        </activity>
+
+        <!-- Keep compatibility with old shortcuts. -->
+        <activity-alias android:name="PluggableDisplaySettings"
+                android:label="@string/pluggable_display_settings"
+                android:clearTaskOnLaunch="true"
+                android:exported="true"
+                android:targetActivity="Settings$DisplaySettingsActivity">
+            <meta-data android:name="com.android.settings.FRAGMENT_CLASS"
+                android:value="com.android.settings.PluggableDisplaySettings" />
+            <meta-data android:name="com.android.settings.TOP_LEVEL_HEADER_ID"
+                android:resource="@id/display_settings" />
+            <meta-data android:name="com.android.settings.PARENT_FRAGMENT_TITLE"
+                android:resource="@string/display_settings" />
+            <meta-data android:name="com.android.settings.PARENT_FRAGMENT_CLASS"
+                android:value="com.android.settings.Settings$DisplaySettingsActivity" />
+        </activity-alias>
+
         <activity android:name="Settings$DeviceInfoSettingsActivity"
                 android:theme="@android:style/Theme.Holo.DialogWhenLarge"
                 android:label="@string/device_info_settings"
diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index a4de070..5f767ba 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -159,6 +159,90 @@
         <item>1.30</item>
     </string-array>
 
+    <string-array name="entries_display_colordepth_0">
+        <item>16 bit</item>
+        <item>32 bit</item>
+    </string-array>
+    <string-array name="entries_display_colordepth_1">
+        <item>16 bit</item>
+        <item>32 bit</item>
+    </string-array>
+    <string-array name="entries_display_colordepth_2">
+        <item>16 bit</item>
+        <item>32 bit</item>
+    </string-array>
+    <string-array name="entries_display_colordepth_3">
+        <item>16 bit</item>
+        <item>32 bit</item>
+    </string-array>
+    <string-array name="entries_display_colordepth_4">
+        <item>16 bit</item>
+        <item>32 bit</item>
+    </string-array>
+    <string-array name="entries_display_colordepth_5">
+        <item>16 bit</item>
+        <item>32 bit</item>
+    </string-array>
+    <string-array name="entryvalues_display_colordepth_0" translatable="false">
+        <item>16</item>
+        <item>32</item>
+    </string-array>
+    <string-array name="entryvalues_display_colordepth_1" translatable="false">
+        <item>16</item>
+        <item>32</item>
+    </string-array>
+    <string-array name="entryvalues_display_colordepth_2" translatable="false">
+        <item>16</item>
+        <item>32</item>
+    </string-array>
+    <string-array name="entryvalues_display_colordepth_3" translatable="false">
+        <item>16</item>
+        <item>32</item>
+    </string-array>
+    <string-array name="entryvalues_display_colordepth_4" translatable="false">
+        <item>16</item>
+        <item>32</item>
+    </string-array>
+    <string-array name="entryvalues_display_colordepth_5" translatable="false">
+        <item>16</item>
+        <item>32</item>
+    </string-array>
+    <string-array name="entries_primary_action_mode">
+        <item>Full Screen</item>
+        <item>16:9 Mode</item>
+        <item>4:3 Mode</item>
+    </string-array>
+
+    <string-array name="entryvalues_primary_action_mode" translatable="false">
+        <item>1000</item>
+        <item>4000</item>
+        <item>8000</item>
+    </string-array>
+
+    <string-array name="entries_action_mode">
+        <item>Full Screen</item>
+        <item>Keep Equal Proportion</item>
+        <item>16:9 Mode</item>
+        <item>4:3 Mode</item>
+    </string-array>
+
+    <string-array name="entryvalues_action_mode" translatable="false">
+        <item>1000</item>
+        <item>2000</item>
+        <item>4000</item>
+        <item>8000</item>
+    </string-array>
+
+    <string-array name="entries_audio_passthrough">
+        <item>PCM</item>
+        <item>Pass Through</item>
+    </string-array>
+
+    <string-array name="entryvalues_audio_passthrough" translatable="false">
+        <item>1000</item>
+        <item>2000</item>
+    </string-array>
+
     <!-- TTS settings -->
 
     <!-- Default speech rate choices -->
diff --git a/res/values/strings.xml b/res/values/strings.xml
index f0e59ac..2da352e 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -1225,6 +1225,101 @@
     <!-- Bluetooth settings.  Dock Setting Dialog - Remember setting and don't ask user again -->
     <string name="bluetooth_dock_settings_remember">Remember settings</string>
 
+    <string name="alarm_reboot_title">Reboot</string>
+    <string name="alarm_reboot_msg">Main Display Mode/Depth Changed, Need reboot</string>
+    <string name="pluggable_display_settings_title">Advanced display</string>
+    <string name="pluggable_display_settings">Advanced display</string>
+    <string name="pluggable_settings_primary_display">primary display</string>
+    <string name="pluggable_settings_added_dislay">added display</string>
+    <string name="pluggable_settings_display_hdmi">HDMI</string>
+    <string name="pluggable_settings_display_ldb">LCD</string>
+    <string name="pluggable_settings_display_mode">Display Mode</string>
+    <string name="pluggable_settings_colordepth">Color Depth</string>
+    <string name="pluggable_settings_enable_display">Enable Display</string>
+    <string name="pluggable_settings_width_overscan">Width OverScan</string>
+    <string name="pluggable_settings_height_overscan">Height OverScan</string>
+    <string name="pluggable_settings_aspect_ratio">Aspect Ratio</string>
+    <string name="pluggable_settings_keep_highest_mode">Keep Highest Mode</string>
+    <string name="audio_pass_through">Audio PassThrough</string>
+
+    <string name="pluggable_display_category_title_1">Display 1</string>
+    <string name="display_enable_title_1">Enable Display</string>
+    <string name="display_mirror_title_1">Mirror</string>
+    <string name="display_overscan_title_1">OverScan</string>
+
+    <string name="title_display_mode_1">Display Mode</string>
+    <string name="summary_display_mode_1" translatable="false">No display plugged</string>
+    <string name="dialog_title_display_mode_1">Display Mode</string>
+    <string name="title_display_rotation_1">Rotation</string>
+    <string name="summary_display_rotation_1">Rotation</string>
+    <string name="dialog_title_display_rotation_1">Rotation</string>
+    <string name="title_display_colordepth_1">Color Depth</string>
+    <string name="summary_display_colordepth_1">Color Depth</string>
+    <string name="dialog_title_display_colordepth_1">Color Depth</string>
+
+    <string name="display_enable_error_1">enable error</string>
+    <string name="display_mirror_error_1">mirror error</string>
+    <string name="display_overscan_error_1">overscan error</string>
+    <string name="display_rotation_error_1">rotation error</string>
+    <string name="display_colordepth_error_1">colordepth error</string>
+
+    <string name="pluggable_display_category_title_2">Display 2</string>
+    <string name="display_enable_title_2">Enable Display</string>
+    <string name="display_mirror_title_2">Mirror</string>
+    <string name="display_overscan_title_2">OverScan</string>
+    <string name="title_display_mode_2">Display Mode</string>
+    <string name="summary_display_mode_2" translatable="false">No display plugged</string>
+    <string name="dialog_title_display_mode_2">Display Mode</string>
+    <string name="title_display_rotation_2">Rotation</string>
+    <string name="summary_display_rotation_2">Rotation</string>
+    <string name="dialog_title_display_rotation_2">Rotation</string>
+    <string name="title_display_colordepth_2">Color Depth</string>
+    <string name="summary_display_colordepth_2">Color Depth</string>
+    <string name="dialog_title_display_colordepth_2">Color Depth</string>
+    <string name="display_enable_error_2">enable error</string>
+    <string name="display_mirror_error_2">mirror error</string>
+    <string name="display_overscan_error_2">overscan error</string>
+    <string name="display_rotation_error_2">rotation error</string>
+    <string name="display_colordepth_error_2">colordepth error</string>
+
+    <string name="pluggable_display_category_title_3">Display 3</string>
+    <string name="display_enable_title_3">Enable Display</string>
+    <string name="display_mirror_title_3">Mirror</string>
+    <string name="display_overscan_title_3">OverScan</string>
+    <string name="title_display_mode_3">Display Mode</string>
+    <string name="summary_display_mode_3" translatable="false">No display plugged</string>
+    <string name="dialog_title_display_mode_3">Display Mode</string>
+    <string name="title_display_rotation_3">Rotation</string>
+    <string name="summary_display_rotation_3">Rotation</string>
+    <string name="dialog_title_display_rotation_3">Rotation</string>
+    <string name="title_display_colordepth_3">Color Depth</string>
+    <string name="summary_display_colordepth_3">Color Depth</string>
+    <string name="dialog_title_display_colordepth_3">Color Depth</string>
+    <string name="display_enable_error_3">enable error</string>
+    <string name="display_mirror_error_3">mirror error</string>
+    <string name="display_overscan_error_3">overscan error</string>
+    <string name="display_rotation_error_3">rotation error</string>
+    <string name="display_colordepth_error_3">colordepth error</string>
+
+    <string name="pluggable_display_category_title_4">Display 4</string>
+    <string name="display_enable_title_4">Enable Display</string>
+    <string name="display_mirror_title_4">Mirror</string>
+    <string name="display_overscan_title_4">OverScan</string>
+    <string name="title_display_mode_4">Display Mode</string>
+    <string name="summary_display_mode_4" translatable="false">No display plugged</string>
+    <string name="dialog_title_display_mode_4">Display Mode</string>
+    <string name="title_display_rotation_4">Rotation</string>
+    <string name="summary_display_rotation_4">Rotation</string>
+    <string name="dialog_title_display_rotation_4">Rotation</string>
+    <string name="title_display_colordepth_4">Color Depth</string>
+    <string name="summary_display_colordepth_4">Color Depth</string>
+    <string name="dialog_title_display_colordepth_4">Color Depth</string>
+    <string name="display_enable_error_4">enable error</string>
+    <string name="display_mirror_error_4">mirror error</string>
+    <string name="display_overscan_error_4">overscan error</string>
+    <string name="display_rotation_error_4">rotation error</string>
+    <string name="display_colordepth_error_4">colordepth error</string>
+
     <!-- Wifi Display settings. The title of the screen. [CHAR LIMIT=40] -->
     <string name="wifi_display_settings_title">Cast screen</string>
     <!-- Wifi Display settings. The title of a menu item to enable wireless display [CHAR LIMIT=40] -->
diff --git a/res/xml/display_settings.xml b/res/xml/display_settings.xml
index 0eb90d0..3277ada 100644
--- a/res/xml/display_settings.xml
+++ b/res/xml/display_settings.xml
@@ -62,4 +62,9 @@
                 android:title="@string/wifi_display_settings_title"
                 android:fragment="com.android.settings.wfd.WifiDisplaySettings" />
 
+        <PreferenceScreen
+                android:key="pluggable_display"
+                android:title="@string/pluggable_display_settings_title"
+                android:fragment="com.android.settings.PluggableDisplaySettings" />
+
 </PreferenceScreen>
diff --git a/res/xml/pluggable_display_settings.xml b/res/xml/pluggable_display_settings.xml
new file mode 100644
index 0000000..80e69f1
--- /dev/null
+++ b/res/xml/pluggable_display_settings.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	android:title="@string/pluggable_display_settings_title" >
+
+</PreferenceScreen>
diff --git a/src/com/android/settings/DisplaySettings.java b/src/com/android/settings/DisplaySettings.java
index 7772b7c..6c0f346 100644
--- a/src/com/android/settings/DisplaySettings.java
+++ b/src/com/android/settings/DisplaySettings.java
@@ -32,9 +32,13 @@ import android.preference.ListPreference;
 import android.preference.Preference;
 import android.preference.Preference.OnPreferenceClickListener;
 import android.preference.PreferenceScreen;
+import android.preference.PreferenceActivity;
 import android.provider.Settings;
 import android.provider.Settings.SettingNotFoundException;
 import android.util.Log;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
 
 import com.android.internal.view.RotationPolicy;
 import com.android.settings.DreamSettings;
@@ -53,6 +57,9 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
     private static final String KEY_FONT_SIZE = "font_size";
     private static final String KEY_NOTIFICATION_PULSE = "notification_pulse";
     private static final String KEY_SCREEN_SAVER = "screensaver";
+    private static final String KEY_PLUGGABLE_DISPLAY = "pluggable_display";
+
+    private static final int MENU_ID_DISP = Menu.FIRST;
 
     private static final int DLG_GLOBAL_CHANGE_WARNING = 1;
 
@@ -65,6 +72,8 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
     private ListPreference mScreenTimeoutPreference;
     private Preference mScreenSaverPreference;
 
+    private Preference mPluggableDisplayPreference;
+
     private final RotationPolicy.RotationPolicyListener mRotationPolicyListener =
             new RotationPolicy.RotationPolicyListener() {
         @Override
@@ -122,6 +131,8 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
                 Log.e(TAG, Settings.System.NOTIFICATION_LIGHT_PULSE + " not found");
             }
         }
+
+        mPluggableDisplayPreference = (Preference)findPreference(KEY_PLUGGABLE_DISPLAY);
     }
 
     private void updateTimeoutPreferenceDescription(long currentTimeout) {
@@ -254,6 +265,31 @@ public class DisplaySettings extends SettingsPreferenceFragment implements
         return null;
     }
 
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        menu.add(Menu.NONE, MENU_ID_DISP, 0, R.string.pluggable_display_settings)
+                //.setIcon(com.android.internal.R.drawable.stat_sys_data_usb)
+                .setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case MENU_ID_DISP:
+                if (getActivity() instanceof PreferenceActivity) {
+                    ((PreferenceActivity) getActivity()).startPreferencePanel(
+                            PluggableDisplaySettings.class.getCanonicalName(),
+                            null,
+                            R.string.pluggable_display_settings, null,
+                            this, 0);
+                } else {
+                    startFragment(this, PluggableDisplaySettings.class.getCanonicalName(), -1, null);
+                }
+                return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
     private void updateState() {
         updateAccelerometerRotationCheckbox();
         readFontSizePreference(mFontSizePref);
diff --git a/src/com/android/settings/PluggableDisplaySettings.java b/src/com/android/settings/PluggableDisplaySettings.java
new file mode 100644
index 0000000..68e1552
--- /dev/null
+++ b/src/com/android/settings/PluggableDisplaySettings.java
@@ -0,0 +1,448 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/*
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
+ */
+
+package com.android.settings;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.ActivityManagerNative;
+import android.app.admin.DevicePolicyManager;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.BroadcastReceiver;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.content.res.Resources;
+import android.content.DialogInterface;
+import android.database.ContentObserver;
+import android.os.Message;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.RemoteException;
+import android.preference.CheckBoxPreference;
+import android.preference.ListPreference;
+import android.preference.SeekBarPreference;
+import android.preference.Preference;
+import android.preference.PreferenceScreen;
+import android.preference.PreferenceCategory;
+import android.provider.Settings;
+import android.provider.Settings.SettingNotFoundException;
+import android.util.Log;
+import android.view.IWindowManager;
+import android.view.Surface;
+import android.view.View;
+
+import android.os.FileUtils;
+import android.os.Process;
+
+import java.util.ArrayList;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.FileNotFoundException;
+
+public class PluggableDisplaySettings extends SettingsPreferenceFragment implements
+        Preference.OnPreferenceChangeListener {
+
+    private static final String TAG = "PluggableDisplaySettings";
+    private static final boolean DBG = true;
+
+    private static final int MAX_DISPLAY_DEVICE = 6;    
+
+    private static final String[] KEY_DISPLAY_ENABLE     = {"display_enable_0","display_enable_1","display_enable_2",
+                                                            "display_enable_3","display_enable_4","display_enable_5"};
+    private static final String[] KEY_DISPLAY_XOVERSCAN   = {"display_xoverscan_0","display_xoverscan_1","display_xoverscan_2",
+                                                            "display_xoverscan_3","display_xoverscan_4","display_xoverscan_5"};
+    private static final String[] KEY_DISPLAY_YOVERSCAN   = {"display_yoverscan_0","display_yoverscan_1","display_yoverscan_2",
+                                                            "display_yoverscan_3","display_yoverscan_4","display_yoverscan_5"};
+    private static final String[] KEY_DISPLAY_MODE       = {"display_mode_0","display_mode_1","display_mode_2",
+                                                            "display_mode_3","display_mode_4","display_mode_5"};
+    private static final String[] KEY_DISPLAY_KEEPRATE   = {"display_keeprate_0","display_keeprate_1","display_keeprate_2",
+                                                            "display_keeprate_3","display_keeprate_4","display_keeprate_5"};
+    private static final String[] KEY_DISPLAY_CATEGORY   = {"display_category_0","display_category_1","display_category_2",
+                                                            "display_category_3","display_category_4","display_category_5"};
+
+    private String[] mCurrentMode = new String[MAX_DISPLAY_DEVICE];
+    private static final String DISPLAY_HIGH_MODE = "keepHighestMode";
+
+//    private DisplayManager mDisplayManager;
+    private static int[] mXOverScanVal = new int[MAX_DISPLAY_DEVICE];
+    private static int[] mYOverScanVal = new int[MAX_DISPLAY_DEVICE];
+
+    
+    private final Configuration mCurConfig = new Configuration();
+
+    private SeekBarPreference[]  mXOverScanPref      = new SeekBarPreference[MAX_DISPLAY_DEVICE];
+    private SeekBarPreference[]  mYOverScanPref      = new SeekBarPreference[MAX_DISPLAY_DEVICE];
+    private ListPreference[]     mDisplayModePref   = new ListPreference[MAX_DISPLAY_DEVICE];
+    private ListPreference[]     mKeepRatePref    = new ListPreference[MAX_DISPLAY_DEVICE];
+
+    private PreferenceCategory[] mCategoryPref      = new PreferenceCategory[MAX_DISPLAY_DEVICE];
+    
+    private Dialog mConfirmDialog;
+
+    private IntentFilter mIntentFilter;
+
+    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+            if (true) {// LocalDisplay.DISPLAY_CONNECT_STATE.equals(action)) {
+                int dispid = 1;// intent.getIntExtra(LocalDisplay.EXTRA_DISPLAY_ID, -1);
+                boolean connect = true;//intent.getBooleanExtra(LocalDisplay.EXTRA_DISPLAY_CONNECT, false);
+                Log.w(TAG, "Display connect state change " + dispid + ", " + connect);
+                handleDisplayConnected(dispid, connect);
+            }
+        }
+    };
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        ContentResolver resolver = getActivity().getContentResolver();
+
+        addPreferencesFromResource(R.xml.pluggable_display_settings);
+
+//        mDisplayManager = (DisplayManager)getActivity().getSystemService(Context.DISPLAY_SERVICE);
+
+
+        for(int i=0; i<MAX_DISPLAY_DEVICE; i++){
+            mDisplayModePref[i] = null;
+            mXOverScanPref[i] = null;
+            mYOverScanPref[i] = null;
+            mKeepRatePref[i] = null;
+            mCategoryPref[i] = null;
+        }
+        mIntentFilter = new IntentFilter();//LocalDisplay.DISPLAY_CONNECT_STATE);
+
+//        if (mDisplayManager.isDisplayConnected(mDisplayManager.getHDMIDisplayId())) {
+            handleDisplayConnected(1/*mDisplayManager.getHDMIDisplayId()*/, true);
+//            Log.d(TAG, "HDMI connected.");
+//        } else {
+//            handleDisplayConnected(mDisplayManager.getHDMIDisplayId(), false);
+//            Log.d(TAG, "HDMI is NOT connected.");
+//        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        getActivity().registerReceiver(mReceiver, mIntentFilter);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        getActivity().unregisterReceiver(mReceiver);
+    }
+
+    private void updateDisplayModePreferenceDescription(int dispid, String CurrentDisplayMode) {
+        ListPreference preference = mDisplayModePref[dispid];
+        preference.setSummary(CurrentDisplayMode);
+    }
+
+    private void updateActionModePreferenceDescription(int dispid, CharSequence CurrentActionMode) {
+        ListPreference preference = mKeepRatePref[dispid];
+        preference.setSummary(CurrentActionMode);
+    }
+
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
+        if(DBG) Log.w(TAG, "onPreferenceTreeClick ");
+
+        return super.onPreferenceTreeClick(preferenceScreen, preference);
+    }
+
+    public boolean onPreferenceChange(Preference preference, Object objValue) {
+        if(DBG) Log.w(TAG, "onPreferenceChange ");
+        final String key = preference.getKey();
+        int dispid = 0;
+
+        for(int i=0; i<MAX_DISPLAY_DEVICE; i++ ) {
+            dispid = i;
+            if (KEY_DISPLAY_MODE[i].equals(key)) {
+                String value = (String) objValue;
+                boolean modeChanged = true;
+                String lastMode = mCurrentMode[i];
+                mCurrentMode[i] = value;
+                updateDisplayModePreferenceDescription(dispid, value);
+
+                break;
+            }
+        
+            if (KEY_DISPLAY_XOVERSCAN[i].equals(key)) {
+                int value = Integer.parseInt(objValue.toString());            
+                    //mDisplayManager.setDisplayXOverScan(dispid, value);
+                    mXOverScanVal[dispid] = value;
+                    View rootView = getActivity().getWindow().peekDecorView();
+                    if(rootView != null) {
+                        rootView.postInvalidateDelayed(200);
+                    }
+                    String dispStr = getActivity().getString(R.string.pluggable_settings_width_overscan);
+                    mXOverScanPref[dispid].setTitle(dispStr + " (" + mXOverScanVal[dispid] + " Pixels)");
+
+                    try {
+                        // Executes the command.
+                    Runtime.getRuntime().exec("/system/bin/wm overscan "+
+                        mXOverScanVal[dispid]+","+
+                        mYOverScanPref[dispid].getProgress()+","+
+                        mXOverScanVal[dispid]+","+
+                        mYOverScanPref[dispid].getProgress());
+                    } catch (Exception e) {
+                        throw new RuntimeException(e);
+                    }
+                break;
+            }
+
+            if (KEY_DISPLAY_YOVERSCAN[i].equals(key)) {
+                int value = Integer.parseInt(objValue.toString());            
+                    mYOverScanVal[dispid] = value;
+                    View rootView = getActivity().getWindow().peekDecorView();
+                    if(rootView != null) {
+                        rootView.postInvalidateDelayed(200);
+                    }
+                    String dispStr = getActivity().getString(R.string.pluggable_settings_height_overscan);
+                    mYOverScanPref[dispid].setTitle(dispStr + " (" + mYOverScanVal[dispid] + " Pixels)");
+                    try {
+                        // Executes the command.
+                        Runtime.getRuntime().exec("/system/bin/wm overscan "+
+                            mXOverScanPref[dispid].getProgress()+","+
+                            mYOverScanVal[dispid]+","+
+                            mXOverScanPref[dispid].getProgress()+","+
+                            mYOverScanVal[dispid]);
+                    } catch (Exception e) {
+                        throw new RuntimeException(e);
+                    }
+
+                break;
+            }
+
+            if (KEY_DISPLAY_KEEPRATE[i].equals(key)) {
+                int value = Integer.parseInt((String) objValue, 16);
+                Log.w(TAG, "onPreferenceChange keeprate value=" + value);;
+//                mDisplayManager.setDisplayKeepRate(dispid, value);         
+                mKeepRatePref[dispid].setValue((String)objValue);
+                updateActionModePreferenceDescription(dispid, mKeepRatePref[dispid].getEntry());
+                break;
+            }
+
+        }
+        
+        return true;
+    }
+
+    private void addDisplayPreference(int fbid) {
+        String dispKey = null;
+        String dispTitle = null;
+        String dispSummary = null;
+        String dispDialogTitle = null;
+        mCategoryPref[fbid] = new PreferenceCategory(getActivity());
+
+        dispKey = "display_category_" + fbid;
+        mCategoryPref[fbid].setKey(dispKey);
+        mCategoryPref[fbid].setOnPreferenceChangeListener(this);
+        getPreferenceScreen().addPreference(mCategoryPref[fbid]);
+
+        mDisplayModePref[fbid] = new ListPreference(getActivity());
+
+        dispKey = "display_mode_" + fbid;
+        mDisplayModePref[fbid].setKey(dispKey);
+        dispTitle = getActivity().getString(R.string.pluggable_settings_display_mode);//"Display Mode";
+        mDisplayModePref[fbid].setTitle(dispTitle);
+        dispSummary = "No display plugged";
+        mDisplayModePref[fbid].setSummary(dispSummary);
+        dispDialogTitle = getActivity().getString(R.string.pluggable_settings_display_mode);//"Display Mode";
+        mDisplayModePref[fbid].setDialogTitle(dispDialogTitle);
+
+        mDisplayModePref[fbid].setOnPreferenceChangeListener(this);
+//        mCategoryPref[fbid].addPreference(mDisplayModePref[fbid]);
+
+    }
+
+
+    private void handleDisplayConnected(int dispid, boolean connection){
+        String[] display_modes = null;
+        if(DBG) Log.w(TAG, "handleDisplayConnected " + connection + "dispid "+ dispid);
+        if (dispid < 0) {
+            Log.w(TAG, "dispid is no valid");
+            return;
+        }
+
+        if(connection) {
+            String displayName = null;
+            String displayType = null;
+            boolean isHDMI = false;
+
+            displayType = "hdmi";//mDisplayManager.getDisplayName(dispid);
+            Log.w(TAG, "Display Name is " + displayType);
+
+            if(displayType != null) {
+                isHDMI = displayType.contains("hdmi");
+            }
+
+            if(dispid == 0) {
+                displayType = getActivity().getString(R.string.pluggable_settings_primary_display);
+            } else {
+                displayType = getActivity().getString(R.string.pluggable_settings_added_dislay);
+            }
+
+            if(isHDMI) {
+                displayName = displayType + ": " + getActivity().getString(R.string.pluggable_settings_display_hdmi);
+            }
+            else {
+                displayName = displayType + ": " + getActivity().getString(R.string.pluggable_settings_display_ldb);
+            }
+
+
+            if((mCategoryPref[dispid] == null)) {
+                addDisplayPreference(dispid);
+            }
+
+            if((mCategoryPref[dispid] == null) || (mDisplayModePref[dispid] == null)) {
+                Log.w(TAG, "addDisplayPreference init failed");
+                return;
+            }
+
+            getPreferenceScreen().addPreference(mCategoryPref[dispid]);
+            mCategoryPref[dispid].setTitle(displayName);
+
+            String currentDisplayMode = "Display Mode";//mDisplayManager.getDisplayMode(dispid);
+            mCurrentMode[dispid] = currentDisplayMode;
+            
+            ArrayList<CharSequence> revisedEntries = new ArrayList<CharSequence>();
+            ArrayList<CharSequence> revisedValues = new ArrayList<CharSequence>();
+
+            revisedEntries.add(mCurrentMode[dispid]);
+            revisedValues.add(mCurrentMode[dispid]);
+
+            mDisplayModePref[dispid].setEntries(
+                revisedEntries.toArray(new CharSequence[revisedEntries.size()]));
+            mDisplayModePref[dispid].setEntryValues(
+                    revisedValues.toArray(new CharSequence[revisedValues.size()]));
+
+            mDisplayModePref[dispid].setValue(String.valueOf(currentDisplayMode));
+            mDisplayModePref[dispid].setOnPreferenceChangeListener(this);
+            updateDisplayModePreferenceDescription(dispid, currentDisplayMode);
+
+            int entry;
+            int entryVal;
+
+            if(isHDMI) {
+                if(mXOverScanPref[dispid] == null) {
+                    mXOverScanPref[dispid] = new SeekBarPreference(getActivity());
+                    String dispStr = "display_xoverscan_" + dispid;
+                    mXOverScanPref[dispid].setKey(dispStr);
+                    dispStr = getActivity().getString(R.string.pluggable_settings_width_overscan);//"Width OverScan";
+                    mXOverScanPref[dispid].setTitle(dispStr);// + " (" + mXOverScanPref[dispid].getProgress() + " Pixels)");
+                    int value = 50;
+                    mXOverScanPref[dispid].setMax(value);
+                    value = mXOverScanVal[dispid];
+                    mXOverScanPref[dispid].setProgress(value);
+
+                    mXOverScanPref[dispid].setOnPreferenceChangeListener(this);
+                    mCategoryPref[dispid].addPreference(mXOverScanPref[dispid]);
+                }
+                if(mYOverScanPref[dispid] == null) {
+                    mYOverScanPref[dispid] = new SeekBarPreference(getActivity());
+                    String dispStr = "display_yoverscan_" + dispid;
+                    mYOverScanPref[dispid].setKey(dispStr);
+                    dispStr = getActivity().getString(R.string.pluggable_settings_height_overscan);//"Height OverScan";
+                    mYOverScanPref[dispid].setTitle(dispStr);// + " (" + mYOverScanPref[dispid].getProgress() + " Pixels)");
+                    int value = 50;
+                    mYOverScanPref[dispid].setMax(value);
+                    value = mYOverScanVal[dispid];
+                    mYOverScanPref[dispid].setProgress(value);
+
+                    mYOverScanPref[dispid].setOnPreferenceChangeListener(this);
+                    mCategoryPref[dispid].addPreference(mYOverScanPref[dispid]);
+                }
+
+		if(mKeepRatePref[dispid] == null) {
+		    String dispKey = null;
+		    String dispTitle = null;
+		    String dispSummary = null;
+		    String dispDialogTitle = null;
+
+		    mKeepRatePref[dispid] = new ListPreference(getActivity());
+
+		    dispKey = "display_keeprate_" + dispid;
+		    mKeepRatePref[dispid].setKey(dispKey);
+		    dispTitle = getActivity().getString(R.string.pluggable_settings_aspect_ratio);//"Aspect Ratio";
+		    mKeepRatePref[dispid].setTitle(dispTitle);
+		    dispSummary = "aspect ration";
+		    mKeepRatePref[dispid].setSummary(dispSummary);
+		    dispDialogTitle = getActivity().getString(R.string.pluggable_settings_aspect_ratio);//"Aspect Ratio";
+		    mKeepRatePref[dispid].setDialogTitle(dispDialogTitle);
+
+		    mKeepRatePref[dispid].setOnPreferenceChangeListener(this);
+//		    mCategoryPref[dispid].addPreference(mKeepRatePref[dispid]);
+
+		    if(dispid == 0) {
+			entry = R.array.entries_primary_action_mode;
+			entryVal = R.array.entryvalues_primary_action_mode;
+		    } else {
+			entry = R.array.entries_action_mode;
+			entryVal = R.array.entryvalues_action_mode;
+		    }
+		    if(entry < 0 || entryVal < 0) {
+			mKeepRatePref[dispid].setEnabled(false);
+		    } else {
+			mKeepRatePref[dispid].setEntries(entry);
+			mKeepRatePref[dispid].setEntryValues(entryVal);
+			int keepRate = 50;//mDisplayManager.getDisplayKeepRate(dispid);
+			mKeepRatePref[dispid].setValue(Integer.toHexString(keepRate));
+			updateActionModePreferenceDescription(dispid, mKeepRatePref[dispid].getEntry());
+		    }
+		}
+
+            }
+        } else {
+            // delete the preferenc entry and value;
+            if((mDisplayModePref[dispid] == null) || (mCategoryPref[dispid] == null)) {
+                Log.w(TAG, "addDisplayPreference init 3 failed");
+                return;
+            }
+
+            ArrayList<CharSequence> revisedEntries = new ArrayList<CharSequence>();
+            ArrayList<CharSequence> revisedValues = new ArrayList<CharSequence>();              
+            mDisplayModePref[dispid].setEntries(
+                revisedEntries.toArray(new CharSequence[revisedEntries.size()]));
+            mDisplayModePref[dispid].setEntryValues(
+                    revisedValues.toArray(new CharSequence[revisedValues.size()]));     
+            mDisplayModePref[dispid].setOnPreferenceChangeListener(this);
+
+            getPreferenceScreen().removePreference(mCategoryPref[dispid]);
+        }
+    }
+    
+    private void handleDisplayStateChanged(int dispid, int state) {
+        if(DBG) Log.w(TAG, "handleDisplayStateChanged");
+        if (dispid < 0) {
+            Log.w(TAG, "dispid is no valid");
+            return;
+        }
+        
+    }
+        
+}
+
+
-- 
1.7.9.5

