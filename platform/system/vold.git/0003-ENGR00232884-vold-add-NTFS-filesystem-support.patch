From 0daa6863a4ca1e9ea0c06a09d4cb6af5d3301375 Mon Sep 17 00:00:00 2001
From: Xinyu Chen <xinyu.chen@freescale.com>
Date: Thu, 8 Nov 2012 11:46:30 +0800
Subject: [PATCH 3/9] ENGR00232884 vold: add NTFS filesystem support

Add fuse based NTFS-3g filesystem support.
The fsck_msdos will not break the ntfs, so
we take the chance after msdos fsck failure
to check the NTFS existed or not.

Change-Id: I10b3801eb8fb49eb9f6d0e7ee992c64a417d128a
Signed-off-by: Xinyu Chen <xinyu.chen@freescale.com>
---
 Android.mk |   1 +
 Ntfs.cpp   | 153 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Ntfs.h     |  32 +++++++++++++
 Volume.cpp |  19 +++++++-
 4 files changed, 204 insertions(+), 1 deletion(-)

diff --git a/Android.mk b/Android.mk
index cecab1e..2786417 100644
--- a/Android.mk
+++ b/Android.mk
@@ -11,6 +11,7 @@ common_src_files := \
 	Process.cpp \
 	Ext4.cpp \
 	Fat.cpp \
+	Ntfs.cpp \
 	Loop.cpp \
 	Devmapper.cpp \
 	ResponseCode.cpp \
diff --git a/Ntfs.cpp b/Ntfs.cpp
new file mode 100644
index 0000000..41a1663
--- /dev/null
+++ b/Ntfs.cpp
@@ -0,0 +1,153 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * Copyright (C) 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+
+#include <linux/kdev_t.h>
+#include <linux/fs.h>
+
+#define LOG_TAG "Vold"
+
+#include <cutils/log.h>
+#include <cutils/properties.h>
+
+#include "Ntfs.h"
+
+static char NTFS_FIX_PATH[] = "/system/bin/ntfsfix";
+static char NTFS_MOUNT_PATH[] = "/system/bin/ntfs-3g";
+extern "C" int logwrap(int argc, const char **argv, int background);
+
+int Ntfs::check(const char *fsPath) {
+
+    if (access(NTFS_FIX_PATH, X_OK)) {
+        SLOGW("Skipping fs checks\n");
+        return 0;
+    }
+
+    int rc = 0;
+    const char *args[4];
+    /* we first use -n to do ntfs detection */
+    args[0] = NTFS_FIX_PATH;
+    args[1] = "-n";
+    args[2] = fsPath;
+    args[3] = NULL;
+
+    rc = logwrap(3, args, 1);
+    if (rc) {
+        errno = ENODATA;
+        return -1;
+    }
+
+    SLOGI("Ntfs filesystem existed");
+
+    /* do the real fix */
+    /* redo the ntfsfix without -n to fix problems */
+    args[1] = fsPath;
+    args[2] = NULL;
+
+    rc = logwrap(2, args, 1);
+    if (rc) {
+        errno = EIO;
+        SLOGE("Filesystem check failed (unknown exit code %d)", rc);
+        return -1;
+    }
+
+    SLOGI("Ntfs filesystem check completed OK");
+    return 0;
+}
+
+int Ntfs::doMount(const char *fsPath, const char *mountPoint,
+                 bool ro, bool remount, bool executable,
+                 int ownerUid, int ownerGid, int permMask, bool createLost) {
+    int rc;
+    char mountData[255];
+    const char *args[6];
+
+    /*
+     * Note: This is a temporary hack. If the sampling profiler is enabled,
+     * we make the SD card world-writable so any process can write snapshots.
+     *
+     * TODO: Remove this code once we have a drop box in system_server.
+     */
+    char value[PROPERTY_VALUE_MAX];
+    property_get("persist.sampling_profiler", value, "");
+    if (value[0] == '1') {
+        SLOGW("The SD card is world-writable because the"
+            " 'persist.sampling_profiler' system property is set to '1'.");
+        permMask = 0;
+    }
+
+    sprintf(mountData,
+            "utf8,uid=%d,gid=%d,fmask=%o,dmask=%o,"
+	    "shortname=mixed,nodev,nosuid,dirsync",
+            ownerUid, ownerGid, permMask, permMask);
+
+    if (!executable)
+        strcat(mountData, ",noexec");
+    if (ro)
+        strcat(mountData, ",ro");
+    if (remount)
+        strcat(mountData, ",remount");
+
+    SLOGD("Mounting ntfs with options:%s\n", mountData);
+
+    args[0] = NTFS_MOUNT_PATH;
+    args[1] = "-o";
+    args[2] = mountData;
+    args[3] = fsPath;
+    args[4] = mountPoint;
+    args[5] = NULL;
+
+    rc = logwrap(5, args, 1);
+
+    if (rc && errno == EROFS) {
+        SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
+        strcat(mountData, ",ro");
+        rc = logwrap(5, args, 1);
+    }
+
+    if (rc == 0 && createLost) {
+        char *lost_path;
+        asprintf(&lost_path, "%s/LOST.DIR", mountPoint);
+        if (access(lost_path, F_OK)) {
+            /*
+             * Create a LOST.DIR in the root so we have somewhere to put
+             * lost cluster chains (fsck_msdos doesn't currently do this)
+             */
+            if (mkdir(lost_path, 0755)) {
+                SLOGE("Unable to create LOST.DIR (%s)", strerror(errno));
+            }
+        }
+        free(lost_path);
+    }
+
+    return rc;
+}
diff --git a/Ntfs.h b/Ntfs.h
new file mode 100644
index 0000000..c15e58b
--- /dev/null
+++ b/Ntfs.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * Copyright (C) 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _NTFS_H
+#define _NTFS_H
+
+#include <unistd.h>
+
+class Ntfs {
+public:
+    static int check(const char *fsPath);
+    static int doMount(const char *fsPath, const char *mountPoint,
+                       bool ro, bool remount, bool executable,
+                       int ownerUid, int ownerGid, int permMask,
+                       bool createLost);
+};
+
+#endif
diff --git a/Volume.cpp b/Volume.cpp
index 6dd1cc0..b8d3c19 100644
--- a/Volume.cpp
+++ b/Volume.cpp
@@ -46,6 +46,7 @@
 #include "VolumeManager.h"
 #include "ResponseCode.h"
 #include "Fat.h"
+#include "Ntfs.h"
 #include "Process.h"
 #include "cryptfs.h"
 
@@ -423,9 +424,18 @@ int Volume::mountVol() {
         errno = 0;
         setState(Volume::State_Checking);
 
+        int ntfs = 0;
         if (Fat::check(devicePath)) {
             if (errno == ENODATA) {
                 SLOGW("%s does not contain a FAT filesystem\n", devicePath);
+                /* try the NTFS filesystem */
+                if (!Ntfs::check(devicePath)) {
+                    ntfs = 1;
+                    SLOGI("%s contain a NTFS filesystem\n", devicePath);
+                    goto mnt;
+                } else
+                    SLOGW("%s does not contain a NTFS filesystem\n", devicePath);
+
                 continue;
             }
             errno = EIO;
@@ -435,10 +445,17 @@ int Volume::mountVol() {
             return -1;
         }
 
+mnt:
         errno = 0;
         int gid;
 
-        if (Fat::doMount(devicePath, getMountpoint(), false, false, false,
+        if (ntfs) {
+            if (Ntfs::doMount(devicePath, getMountpoint(), false, false, false,
+                    AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
+                SLOGE("%s failed to mount via NTFS (%s)\n", devicePath, strerror(errno));
+                continue;
+            }
+        } else if (Fat::doMount(devicePath, getMountpoint(), false, false, false,
                 AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
             SLOGE("%s failed to mount via VFAT (%s)\n", devicePath, strerror(errno));
             continue;
-- 
1.8.0

