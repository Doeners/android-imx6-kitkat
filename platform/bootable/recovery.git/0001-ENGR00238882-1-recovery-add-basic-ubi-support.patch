From 096e7f0316bce963d5756a621f2591fa165628fb Mon Sep 17 00:00:00 2001
From: Zhang Jiejing <jiejing.zhang@freescale.com>
Date: Sat, 5 Jan 2013 15:33:53 +0800
Subject: [PATCH 1/5] ENGR00238882-1 recovery: add basic ubi support.

Add basic ubi support, rewrite the updatevolume,
not use system() to call anther process to make
this image simple, no needs to change make file.

Signed-off-by: Zhang Jiejing <jiejing.zhang@freescale.com>
---
 Android.mk         | 13 ++++++++++
 roots.cpp          | 21 ++++++++++++++++-
 ubi.cpp            | 69 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ubi.h              | 25 ++++++++++++++++++++
 updater/Android.mk |  7 ++++++
 updater/install.c  | 16 +++++++++++++
 6 files changed, 150 insertions(+), 1 deletion(-)

diff --git a/Android.mk b/Android.mk
index 075fa2c..ff2ee1f 100644
--- a/Android.mk
+++ b/Android.mk
@@ -60,6 +60,19 @@ ifeq ($(TARGET_USERIMAGES_USE_EXT4), true)
     LOCAL_STATIC_LIBRARIES += libext4_utils_static libz
 endif
 
+ifeq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+    LOCAL_CFLAGS += -DUSE_UBIFS
+    LOCAL_C_INCLUDES += external/mtd-utils/new-utils/include/
+    LOCAL_STATIC_LIBRARIES += libubi
+    LOCAL_SRC_FILES += ubi.cpp
+endif
+
+ifeq ($(HAVE_SELINUX), true)
+  LOCAL_C_INCLUDES += external/libselinux/include
+  LOCAL_STATIC_LIBRARIES += libselinux
+  LOCAL_CFLAGS += -DHAVE_SELINUX
+endif # HAVE_SELINUX
+
 # This binary is in the recovery ramdisk, which is otherwise a copy of root.
 # It gets copied there in config/Makefile.  LOCAL_MODULE_TAGS suppresses
 # a (redundant) copy of the binary in /system/bin for user builds.
diff --git a/roots.cpp b/roots.cpp
index 113dba1..1109dba 100644
--- a/roots.cpp
+++ b/roots.cpp
@@ -30,6 +30,12 @@
 #include "make_ext4fs.h"
 
 static struct fstab *fstab = NULL;
+#ifdef USE_UBIFS
+#include "ubi.h"
+#endif
+
+static int num_volumes = 0;
+static Volume* device_volumes = NULL;
 
 extern struct selabel_handle *sehandle;
 
@@ -105,7 +111,8 @@ int ensure_path_mounted(const char* path) {
         }
         return mtd_mount_partition(partition, v->mount_point, v->fs_type, 0);
     } else if (strcmp(v->fs_type, "ext4") == 0 ||
-               strcmp(v->fs_type, "vfat") == 0) {
+               strcmp(v->fs_type, "vfat") == 0 ||
+               strcmp(v->fs_type, "ubifs") == 0) {
         result = mount(v->blk_device, v->mount_point, v->fs_type,
                        MS_NOATIME | MS_NODEV | MS_NODIRATIME, "");
         if (result == 0) return 0;
@@ -198,6 +205,18 @@ int format_volume(const char* volume) {
         }
         return 0;
     }
+#ifdef USE_UBIFS
+    if (strcmp(v->fs_type, "ubifs") == 0) {
+        int ret;
+        LOGW("formating by ubiVolumeFormat");
+        ret = ubiVolumeFormat(v->device);
+        if (ret != 0) {
+            LOGE("ubiVolumeFormat return error:%d", ret);
+            return -1;
+        }
+            return 0;
+    }
+#endif
 
     LOGE("format_volume: fs_type \"%s\" unsupported\n", v->fs_type);
     return -1;
diff --git a/ubi.cpp b/ubi.cpp
new file mode 100644
index 0000000..bb37fad
--- /dev/null
+++ b/ubi.cpp
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <unistd.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <sys/stat.h>
+#include <libubi.h>
+
+extern "C" int ubiVolumeFormat(char *location)
+{
+    int ret = -1;
+    libubi_t libubi;
+    struct ubi_vol_info vol_info;
+    int fd;
+    libubi = libubi_open(1);
+
+    if (libubi == NULL) {
+        fprintf(stderr, "can not open libubi");
+        goto done;
+    }
+
+    ret = ubi_node_type(libubi, location);
+    if (ret == 1) {
+        fprintf(stderr, "%s is a ubi device node, not a ubi volume node",
+                location);
+        goto done;
+    } else if (ret < 0) {
+        fprintf(stderr, "%s is not a UBI volume node", location);
+        goto done;
+    }
+
+    ret = ubi_get_vol_info(libubi, location, &vol_info);
+    if (ret) {
+        fprintf(stderr, "can not get information about UBI volume %s", location);
+        goto done;
+    }
+
+    fd = open(location, O_RDWR);
+    if (fd == -1) {
+        fprintf(stderr, "can not open %s", location);
+        goto done;
+    }
+
+    ret = ubi_update_start(libubi, fd, 0);
+    if (ret) {
+        fprintf(stderr, "cannot truncate volume %s", location);
+        close(fd);
+        goto done;
+    }
+
+    close(fd);
+
+  done:
+    return ret;
+}
diff --git a/ubi.h b/ubi.h
new file mode 100644
index 0000000..e99eeec
--- /dev/null
+++ b/ubi.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef UBI_H
+#define UBI_H
+
+#ifdef __cplusplus
+extern "C"
+#endif
+int ubiVolumeFormat(const char *location);
+
+#endif
diff --git a/updater/Android.mk b/updater/Android.mk
index 67e98ec..72df21d 100644
--- a/updater/Android.mk
+++ b/updater/Android.mk
@@ -71,6 +71,13 @@ $(inc) : $(inc_dep_file)
 $(call intermediates-dir-for,EXECUTABLES,updater)/updater.o : $(inc)
 LOCAL_C_INCLUDES += $(dir $(inc))
 
+ifeq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+    LOCAL_CFLAGS += -DUSE_UBIFS
+    LOCAL_C_INCLUDES += external/mtd-utils/new-utils/include/
+    LOCAL_STATIC_LIBRARIES += libubi
+    LOCAL_SRC_FILES += ../ubi.cpp
+endif
+
 inc :=
 inc_dep_file :=
 
diff --git a/updater/install.c b/updater/install.c
index 9fb1b63..139e662 100644
--- a/updater/install.c
+++ b/updater/install.c
@@ -48,10 +48,16 @@
 #include "make_ext4fs.h"
 #endif
 
+#ifdef USE_UBIFS
+#include "ubi.h"
+#endif
+
+
 // mount(fs_type, partition_type, location, mount_point)
 //
 //    fs_type="yaffs2" partition_type="MTD"     location=partition
 //    fs_type="ext4"   partition_type="EMMC"    location=device
+//    fs_type="ubifs"  partition_type="UBI"	location=device
 Value* MountFn(const char* name, State* state, int argc, Expr* argv[]) {
     char* result = NULL;
     if (argc != 4) {
@@ -198,6 +204,7 @@ done:
 //
 //    fs_type="yaffs2" partition_type="MTD"     location=partition fs_size=<bytes> mount_point=<location>
 //    fs_type="ext4"   partition_type="EMMC"    location=device    fs_size=<bytes> mount_point=<location>
+//    fs_type "ubifs"  partition_type="UBIFS"   location=device    fs_size=<bytes> mount_point=<localtion>
 //    if fs_size == 0, then make_ext4fs uses the entire partition.
 //    if fs_size > 0, that is the size to use
 //    if fs_size < 0, then reserve that many bytes at the end of the partition
@@ -273,6 +280,15 @@ Value* FormatFn(const char* name, State* state, int argc, Expr* argv[]) {
         }
         result = location;
 #endif
+
+#ifdef USE_UBIFS
+    } else if (strcmp(fs_type, "ubifs") == 0) {
+
+            if (ubiVolumeFormat(location) != 0)
+                    goto done;
+
+            result = location;
+#endif
     } else {
         printf("%s: unsupported fs_type \"%s\" partition_type \"%s\"",
                 name, fs_type, partition_type);
-- 
1.8.0

