From 1f220b71c802850fcc2a64c3dbfd379025e31ace Mon Sep 17 00:00:00 2001
From: Xiaowen Liu <b37945@freescale.com>
Date: Fri, 11 Jan 2013 16:57:53 +0800
Subject: [PATCH 07/68] ENGR00215174 fix camera v2 preview callback bug and
 cts failure.

1. add HAL_PIXEL_FORMAT_YCbCr_420_P format.
   VPU only support I420 and NV12. but they are not supported by
   camera v2. and cts requires it support more than 1 format.

2. the face detection return BAD_VALUE other than INVALID_OPERATION
   adapt for cts.

3. fix preview callback bug.
   when delete callback stream and release CallbackConsumer,
   but, the onFrameAvailable may happen and access CallbackConsumer.
   so, when CallbackConsumer released, then onFrameAvailable return directly.

Signed-off-by: Xiaowen Liu <b37945@freescale.com>
---
 services/camera/libcameraservice/api1/client2/CallbackProcessor.cpp | 5 +++++
 services/camera/libcameraservice/api1/client2/Parameters.cpp        | 4 +++-
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/services/camera/libcameraservice/api1/client2/CallbackProcessor.cpp b/services/camera/libcameraservice/api1/client2/CallbackProcessor.cpp
index d2ac79c..3359629 100644
--- a/services/camera/libcameraservice/api1/client2/CallbackProcessor.cpp
+++ b/services/camera/libcameraservice/api1/client2/CallbackProcessor.cpp
@@ -243,6 +243,11 @@ bool CallbackProcessor::threadLoop() {
 status_t CallbackProcessor::discardNewCallback() {
     ATRACE_CALL();
     status_t res;
+
+    if (mCallbackConsumer.get() == NULL) {
+        return BAD_VALUE;
+    }
+
     CpuConsumer::LockedBuffer imgBuffer;
     res = mCallbackConsumer->lockNextBuffer(&imgBuffer);
     if (res != OK) {
diff --git a/services/camera/libcameraservice/api1/client2/Parameters.cpp b/services/camera/libcameraservice/api1/client2/Parameters.cpp
index 75282a7..b3b3ab3 100644
--- a/services/camera/libcameraservice/api1/client2/Parameters.cpp
+++ b/services/camera/libcameraservice/api1/client2/Parameters.cpp
@@ -142,6 +142,7 @@ status_t Parameters::initialize(const CameraMetadata *info) {
                     CameraParameters::PIXEL_FORMAT_YUV422I;
                 break;
             case HAL_PIXEL_FORMAT_YV12:
+            case HAL_PIXEL_FORMAT_YCbCr_420_P:
                 supportedPreviewFormats +=
                     CameraParameters::PIXEL_FORMAT_YUV420P;
                 break;
@@ -2014,7 +2015,7 @@ int Parameters::formatStringToEnum(const char *format) {
         !strcmp(format, CameraParameters::PIXEL_FORMAT_YUV422I) ?
             HAL_PIXEL_FORMAT_YCbCr_422_I :  // YUY2
         !strcmp(format, CameraParameters::PIXEL_FORMAT_YUV420P) ?
-            HAL_PIXEL_FORMAT_YV12 :         // YV12
+            HAL_PIXEL_FORMAT_YCbCr_420_P :         // YV12
         !strcmp(format, CameraParameters::PIXEL_FORMAT_RGB565) ?
             HAL_PIXEL_FORMAT_RGB_565 :      // RGB565
         !strcmp(format, CameraParameters::PIXEL_FORMAT_RGBA8888) ?
@@ -2037,6 +2038,7 @@ const char* Parameters::formatEnumToString(int format) {
             fmt = CameraParameters::PIXEL_FORMAT_YUV422I;
             break;
         case HAL_PIXEL_FORMAT_YV12:        // YV12
+        case HAL_PIXEL_FORMAT_YCbCr_420_P:        // I420
             fmt = CameraParameters::PIXEL_FORMAT_YUV420P;
             break;
         case HAL_PIXEL_FORMAT_RGB_565:     // RGB565
-- 
1.8.0

