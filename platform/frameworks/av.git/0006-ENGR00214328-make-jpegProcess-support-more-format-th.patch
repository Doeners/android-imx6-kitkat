From fe5a083488ec51f7d301821e0ddea95d9d067165 Mon Sep 17 00:00:00 2001
From: Xiaowen Liu <b37945@freescale.com>
Date: Tue, 8 Jan 2013 16:51:37 +0800
Subject: [PATCH 06/72] ENGR00214328 make jpegProcess support more format than
 HAL_PIXEL_FORMAT_BLOB.

jpegProcess only support HAL_PIXEL_FORMAT_BLOB format when take picture.
Because the format HAL_PIXEL_FORMAT_BLOB is a new customized format in android 4.2.
And now, the gralloc does not support this format.
So, extend it to support more format.

Signed-off-by: Xiaowen Liu <b37945@freescale.com>
---
 .../camera/libcameraservice/api1/client2/JpegProcessor.cpp     | 10 ++++++----
 services/camera/libcameraservice/api1/client2/JpegProcessor.h  |  2 +-
 2 files changed, 7 insertions(+), 5 deletions(-)

diff --git a/services/camera/libcameraservice/api1/client2/JpegProcessor.cpp b/services/camera/libcameraservice/api1/client2/JpegProcessor.cpp
index 77d5c8a..a0911c3 100644
--- a/services/camera/libcameraservice/api1/client2/JpegProcessor.cpp
+++ b/services/camera/libcameraservice/api1/client2/JpegProcessor.cpp
@@ -140,7 +140,7 @@ status_t JpegProcessor::updateStream(const Parameters &params) {
                     strerror(-res), res);
             return res;
         }
-
+        mMaxJpegSize = maxJpegSize.data.i32[0];
     }
     return OK;
 }
@@ -216,6 +216,8 @@ status_t JpegProcessor::processNewCapture() {
     ALOGV("%s: Camera %d: Still capture available", __FUNCTION__,
             mId);
 
+#if 0
+>>>>>>> ENGR00214328 make jpegProcess support more format than HAL_PIXEL_FORMAT_BLOB.
     if (imgBuffer.format != HAL_PIXEL_FORMAT_BLOB) {
         ALOGE("%s: Camera %d: Unexpected format for still image: "
                 "%x, expected %x", __FUNCTION__, mId,
@@ -224,11 +226,11 @@ status_t JpegProcessor::processNewCapture() {
         mCaptureConsumer->unlockBuffer(imgBuffer);
         return OK;
     }
-
+#endif
     // Find size of JPEG image
-    size_t jpegSize = findJpegSize(imgBuffer.data, imgBuffer.width);
+    size_t jpegSize = findJpegSize(imgBuffer.data, mMaxJpegSize/*imgBuffer.width*/);
     if (jpegSize == 0) { // failed to find size, default to whole buffer
-        jpegSize = imgBuffer.width;
+        jpegSize = mMaxJpegSize;//imgBuffer.width;
     }
     size_t heapSize = mCaptureHeap->getSize();
     if (jpegSize > heapSize) {
diff --git a/services/camera/libcameraservice/api1/client2/JpegProcessor.h b/services/camera/libcameraservice/api1/client2/JpegProcessor.h
index b2c05df..58dd20b 100644
--- a/services/camera/libcameraservice/api1/client2/JpegProcessor.h
+++ b/services/camera/libcameraservice/api1/client2/JpegProcessor.h
@@ -77,7 +77,7 @@ class JpegProcessor:
 
     status_t processNewCapture();
     size_t findJpegSize(uint8_t* jpegBuffer, size_t maxSize);
-
+    int mMaxJpegSize;
 };
 
 
-- 
1.8.0

