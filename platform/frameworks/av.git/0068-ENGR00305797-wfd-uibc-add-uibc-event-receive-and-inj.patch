From 1310c9b17c771fac5f8645c3bdc1e4858b31167f Mon Sep 17 00:00:00 2001
From: Jianzheng Zhou <jianzheng.zhou@freescale.com>
Date: Tue, 25 Mar 2014 14:45:37 +0800
Subject: [PATCH 68/72] ENGR00305797 wfd-uibc:add uibc event receive and
 inject it to input subsystem

1.Receive uibc event from sink, parse it and re-assemble it, mock into
kernel's input subsystem without disturbing lower driver.
2.Support two types event: touch event and key event.

Signed-off-by: Jianzheng Zhou <jianzheng.zhou@freescale.com>
---
 .../wifi-display/source/PlaybackSession.cpp        |   3 +-
 .../wifi-display/source/WifiDisplaySource.cpp      | 316 +++++++++++++++++++--
 .../wifi-display/source/WifiDisplaySource.h        |  40 ++-
 3 files changed, 326 insertions(+), 33 deletions(-)

diff --git a/media/libstagefright/wifi-display/source/PlaybackSession.cpp b/media/libstagefright/wifi-display/source/PlaybackSession.cpp
index 286ea13..6b1fcef 100644
--- a/media/libstagefright/wifi-display/source/PlaybackSession.cpp
+++ b/media/libstagefright/wifi-display/source/PlaybackSession.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright 2012, The Android Open Source Project
+ * Copyright (C) 2014 Freescale Semiconductor, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -207,7 +208,7 @@ status_t WifiDisplaySource::PlaybackSession::Track::start() {
 }
 
 void WifiDisplaySource::PlaybackSession::Track::stopAsync() {
-    ALOGV("Track::stopAsync isAudio=%d", mIsAudio);
+    ALOGI("Track::stopAsync isAudio=%d", mIsAudio);
 
     if (mConverter != NULL) {
         mConverter->shutdownAsync();
diff --git a/media/libstagefright/wifi-display/source/WifiDisplaySource.cpp b/media/libstagefright/wifi-display/source/WifiDisplaySource.cpp
index 45b27f0..9153623 100644
--- a/media/libstagefright/wifi-display/source/WifiDisplaySource.cpp
+++ b/media/libstagefright/wifi-display/source/WifiDisplaySource.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright 2012, The Android Open Source Project
+ * Copyright (C) 2014 Freescale Semiconductor, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +35,6 @@
 #include <media/stagefright/foundation/ParsedMessage.h>
 #include <media/stagefright/MediaErrors.h>
 #include <media/stagefright/Utils.h>
-
 #include <arpa/inet.h>
 #include <cutils/properties.h>
 
@@ -44,7 +44,6 @@ namespace android {
 
 // static
 const AString WifiDisplaySource::sUserAgent = MakeUserAgent();
-const int32_t DEFAULT_UIBC_PORT = 7239;
 
 WifiDisplaySource::WifiDisplaySource(
         const sp<ANetworkSession> &netSession,
@@ -55,6 +54,12 @@ WifiDisplaySource::WifiDisplaySource(
       mClient(client),
       mSessionID(0),
       mUibcSessionID(0),
+      mUibcTouchFd(-1),
+      mUibcKeyFd(-1),
+      mAbs_x_min(-1),
+      mAbs_x_max(-1),
+      mAbs_y_min(-1),
+      mAbs_y_max(-1),
       mStopReplyID(0),
       mChosenRTPPort(-1),
       mUsingPCMAudio(false),
@@ -145,6 +150,263 @@ status_t WifiDisplaySource::resume() {
     return PostAndAwaitResponse(msg, &response);
 }
 
+#define DEV_DIR "/dev/input"
+#define sizeof_bit_array(bits)  ((bits + 7) / 8)
+#define test_bit(bit, array)    (array[bit/8] & (1<<(bit%8)))
+#define ABS_MT_POSITION_X 0x35
+#define ABS_MT_POSITION_Y 0x36
+struct input_event {
+    struct timeval time;
+    __u16 type;
+    __u16 code;
+    __s32 value;
+};
+int WifiDisplaySource::write_event(int fd, int type, int code, int value)
+{
+    struct input_event event;
+
+    memset(&event, 0, sizeof(event));
+    event.type = type;
+    event.code = code;
+    event.value = value;
+    if(write(fd, &event, sizeof(event)) < sizeof(event)) {
+        ALOGI("write event failed[%d]: %s", errno, strerror(errno));
+        return -1;
+    }
+    return 0;
+}
+
+void WifiDisplaySource::calculateXY(float x, float y, int32_t *abs_x, int32_t *abs_y)
+{
+    *abs_x = mAbs_x_min +
+        (int)((x * (float)(mAbs_x_max - mAbs_x_min)) / 1024 + 0.5);
+    *abs_y = mAbs_y_min +
+        (int)((y * (float)(mAbs_y_max - mAbs_y_min)) / 768 + 0.5);
+}
+
+int WifiDisplaySource::containsNonZeroByte(const uint8_t* array, uint32_t startIndex, uint32_t endIndex)
+{
+    const uint8_t* end = array + endIndex;
+    array += startIndex;
+    while (array != end) {
+        if (*(array++) != 0) {
+            return 1;
+        }
+    }
+    return 0;
+}
+int WifiDisplaySource::scan_dir(const char *dirname)
+{
+    char devname[PATH_MAX];
+    char *filename;
+    DIR *dir;
+    struct dirent *de;
+    dir = opendir(dirname);
+    if(dir == NULL)
+        return -1;
+    strcpy(devname, dirname);
+    filename = devname + strlen(devname);
+    *filename++ = '/';
+    while((de = readdir(dir))) {
+        if(de->d_name[0] == '.' &&
+                (de->d_name[1] == '\0' ||
+                 (de->d_name[1] == '.' && de->d_name[2] == '\0')))
+            continue;
+        strcpy(filename, de->d_name);
+        open_dev(devname);
+    }
+    closedir(dir);
+    return 0;
+}
+
+int WifiDisplaySource::open_dev(const char *deviceName)
+{
+    int fd;
+    int version;
+    uint8_t key_bitmask[sizeof_bit_array(KEY_MAX + 1)];
+    uint8_t abs_bitmask[sizeof_bit_array(ABS_MAX + 1)];
+    fd = open(deviceName, O_RDWR);
+    if(fd < 0) {
+        ALOGI("could not open device uid=%d gid=%d [%d]: %s",getuid(), getgid(), errno, strerror(errno));
+        return -1;
+    }
+
+    if(ioctl(fd, EVIOCGVERSION, &version)) {
+        return -1;
+    }
+
+    memset(key_bitmask, 0, sizeof(key_bitmask));
+    if (ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(key_bitmask)), key_bitmask) >= 0) {
+        if (containsNonZeroByte(key_bitmask, 0, sizeof_bit_array(BTN_MISC))
+                || containsNonZeroByte(key_bitmask, sizeof_bit_array(BTN_GAMEPAD),
+                    sizeof_bit_array(BTN_DIGI))
+                || containsNonZeroByte(key_bitmask, sizeof_bit_array(KEY_OK),
+                    sizeof_bit_array(KEY_MAX + 1))) {
+            mUibcKeyFd = fd;
+            ALOGI("get key input device: %s", deviceName);
+        }
+    }
+
+    memset(abs_bitmask, 0, sizeof(abs_bitmask));
+    if (ioctl(fd, EVIOCGBIT(EV_ABS, sizeof(abs_bitmask)), abs_bitmask) >= 0) {
+        // Is this a new modern multi-touch driver?
+        if (test_bit(ABS_MT_POSITION_X, abs_bitmask)
+                && test_bit(ABS_MT_POSITION_Y, abs_bitmask)) {
+            mUibcTouchFd = fd;
+            ALOGI("get multi-touch input device: %s", deviceName);
+
+            // Is this an old style single-touch driver?
+        } else if (test_bit(BTN_TOUCH, key_bitmask)
+                && test_bit(ABS_X, abs_bitmask) && test_bit(ABS_Y, abs_bitmask)) {
+            mUibcTouchFd = fd;
+            ALOGI("get single-touch input device: %s", deviceName);
+        }
+    }
+    return 0;
+}
+
+status_t WifiDisplaySource::sendtouchevent(int32_t action, int32_t x, int32_t y)
+{
+    int32_t abs_x, abs_y;
+    struct input_absinfo absinfo;
+    //scan and select touch input device
+    if (mUibcTouchFd < 0) {
+        scan_dir(DEV_DIR);
+
+        //Get touch screen absolute Axis edge value
+        if(ioctl(mUibcTouchFd, EVIOCGABS(ABS_MT_POSITION_X), &absinfo)) {
+            ALOGI("Error reading absolute controller ABS_X[%d]: %s", errno, strerror(errno));
+            return -1;
+        }
+        mAbs_x_min = absinfo.minimum;
+        mAbs_x_max = absinfo.maximum;
+        if(ioctl(mUibcTouchFd, EVIOCGABS(ABS_MT_POSITION_Y), &absinfo)) {
+            ALOGI("Error reading absolute controller ABS_Y[%d]: %s", errno, strerror(errno));
+            return -2;
+        }
+        mAbs_y_min = absinfo.minimum;
+        mAbs_y_max = absinfo.maximum;
+
+    }
+    if(mUibcTouchFd < 0) {
+        ALOGI("couldn't open touch event device");
+        return -3;
+    }
+    switch(action)
+    {
+        //According to specific touch to decide event sequence
+        case TOUCH_ACTION_DOWN:
+            ALOGI("action down");
+        case TOUCH_ACTION_POINTER_DOWN:
+            ALOGI("action pointer down");
+        case TOUCH_ACTION_MOVE:
+            ALOGI("send move x=%d y=%d", x, y);
+            calculateXY(x*1.333-170.24, 1.333*y, &abs_x, &abs_y);
+            write_event(mUibcTouchFd, 3, 53, abs_x);
+            write_event(mUibcTouchFd, 3, 54, abs_y);
+            write_event(mUibcTouchFd, 3, 58, 1344);
+            write_event(mUibcTouchFd, 3, 48, 1);
+            write_event(mUibcTouchFd, 3, 57, 0);
+            write_event(mUibcTouchFd, 0, 2, 0);
+            write_event(mUibcTouchFd, 3, 53, 0);
+            write_event(mUibcTouchFd, 3, 54, 0);
+            write_event(mUibcTouchFd, 3, 58, 0);
+            write_event(mUibcTouchFd, 3, 48, 1);
+            write_event(mUibcTouchFd, 3, 57, 1);
+            write_event(mUibcTouchFd, 0, 2, 0);
+            write_event(mUibcTouchFd, 0, 0, 0);
+
+            break;
+        case TOUCH_ACTION_UP:
+            ALOGI("action up");
+        case TOUCH_ACTION_POINTER_UP:
+            ALOGI("action pointer up");
+        case TOUCH_ACTION_CANCEL:
+            ALOGI("action cancel");
+            write_event(mUibcTouchFd, 3, 53, 0);
+            write_event(mUibcTouchFd, 3, 54, 0);
+            write_event(mUibcTouchFd, 3, 58, 0);
+            write_event(mUibcTouchFd, 3, 48, 1);
+            write_event(mUibcTouchFd, 3, 57, 1);
+            write_event(mUibcTouchFd, 0, 2, 0);
+            write_event(mUibcTouchFd, 0, 0, 0);
+            break;
+    }
+    return 0;
+}
+
+status_t WifiDisplaySource::sendkeyevent(int16_t action, int16_t keycode)
+{
+    //scan and select key input device
+    if (mUibcKeyFd < 0) {
+        scan_dir(DEV_DIR);
+    }
+    if(mUibcKeyFd < 0) {
+        ALOGI("couldn't open touch event device");
+        return -3;
+    }
+    switch(action)
+    {
+        case KEY_ACTION_DOWN:
+            ALOGI("key down");
+            write_event(mUibcKeyFd, 1, 114, 1);
+            write_event(mUibcKeyFd, 0, 0, 0);
+            write_event(mUibcKeyFd, 1, 114, 0);
+            write_event(mUibcKeyFd, 0, 0, 0);
+
+            break;
+        case KEY_ACTION_UP:
+            ALOGI("key up");
+            write_event(mUibcKeyFd, 1, 115, 1);
+            write_event(mUibcKeyFd, 0, 0, 0);
+            write_event(mUibcKeyFd, 1, 115, 0);
+            write_event(mUibcKeyFd, 0, 0, 0);
+            break;
+    }
+    return 0;
+}
+status_t WifiDisplaySource::parseUIBC(const uint8_t *data) {
+    if (data[6] < 3) {
+        for (int i = 0; i < data[7]; i++) {
+            int32_t x = (int32_t)U16_AT(&data[9]);
+            int32_t y = (int32_t)U16_AT(&data[11]);
+            int32_t action = (int32_t)data[6];
+            ALOGI("wifi display source x=%d y=%d action=%d", x, y,action);
+            //Just mesure uibc latency here
+            int16_t timestamp = (int32_t)U16_AT(&data[4]);
+            if (timestamp > 0) {
+                ALOGI("UIBC latency is %d",(int16_t)(ALooper::GetNowUs()-timestamp));
+            }
+            sendtouchevent(action, x, y);
+        }
+    } else if (data[6] == 3 || data[6] == 4 ) {
+            sendkeyevent(data[6], data[8]);
+    }
+    return OK;
+}
+
+status_t WifiDisplaySource::onUIBCData(const sp<ABuffer> &buffer) {
+    const uint8_t *data = buffer->data();
+
+    switch (data[1]) {
+        case INPUT_CATEGORY_GENERIC: //Generic category
+            {
+                parseUIBC(data);
+                break;
+            }
+
+        case INPUT_CATEGORY_HIDC:
+            break;
+
+        default:
+            {
+                ALOGW("Unknown RTCP packet type %u",(unsigned)data[1]);
+                break;
+            }
+    }
+    return OK;
+}
+
 void WifiDisplaySource::onMessageReceived(const sp<AMessage> &msg) {
     switch (msg->what()) {
         case kWhatStart:
@@ -194,31 +456,26 @@ void WifiDisplaySource::onMessageReceived(const sp<AMessage> &msg) {
             response->postReply(replyID);
             break;
         }
-        case kWhatStartUibc:
+
+       case kWhatUIBCNotify:
         {
-            uint32_t replyID;
-            CHECK(msg->senderAwaitsResponse(&replyID));
+            int32_t reason;
+            CHECK(msg->findInt32("reason", &reason));
+            ALOGI("get uibc notify reason=%d", reason);
+            switch (reason) {
+                case ANetworkSession::kWhatDatagram:
+                {
+                    int32_t sessionID;
+                    CHECK(msg->findInt32("sessionID", &sessionID));
 
-            int32_t localUibcPort;
-            CHECK(msg->findInt32("port", &localUibcPort));
-            ALOGI("Create listening uibc tcp channel on port %d", localUibcPort);
+                    sp<ABuffer> data;
+                    CHECK(msg->findBuffer("data", &data));
+                    onUIBCData(data);
+                    break;
 
-            status_t err = OK;
-            sp<AMessage> notify = new AMessage(kWhatUIBCNotify, id());
-            err = mNetSession->createTCPDatagramSession(
-                    mInterfaceAddr,
-                    localUibcPort,
-                    notify,
-                    &mUibcSessionID);
+                }
 
-            sp<AMessage> response = new AMessage;
-            response->setInt32("err", err);
-            response->postReply(replyID);
-            break;
-        }
-        case kWhatUIBCNotify:
-        {
-            ALOGI("get uibc notify");
+            }
             break;
         }
         case kWhatRTSPNotify:
@@ -931,7 +1188,6 @@ status_t WifiDisplaySource::onReceiveM3Response(
                     &height,
                     &framesPerSecond,
                     &interlaced));
-
         ALOGI("Picked video resolution %u x %u %c%u",
               width, height, interlaced ? 'i' : 'p', framesPerSecond);
 
@@ -1543,7 +1799,7 @@ status_t WifiDisplaySource::onTeardownRequest(
 }
 
 void WifiDisplaySource::finishStop() {
-    ALOGV("finishStop");
+    ALOGI("finishStop");
 
     mState = STOPPING;
 
@@ -1702,7 +1958,7 @@ sp<WifiDisplaySource::PlaybackSession> WifiDisplaySource::findPlaybackSession(
 }
 
 void WifiDisplaySource::disconnectClientAsync() {
-    ALOGV("disconnectClient");
+    ALOGI("disconnectClient");
 
     if (mClientInfo.mPlaybackSession == NULL) {
         disconnectClient2();
@@ -1710,13 +1966,13 @@ void WifiDisplaySource::disconnectClientAsync() {
     }
 
     if (mClientInfo.mPlaybackSession != NULL) {
-        ALOGV("Destroying PlaybackSession");
+        ALOGI("Destroying PlaybackSession");
         mClientInfo.mPlaybackSession->destroyAsync();
     }
 }
 
 void WifiDisplaySource::disconnectClient2() {
-    ALOGV("disconnectClient2");
+    ALOGI("disconnectClient2");
 
     if (mClientInfo.mPlaybackSession != NULL) {
         looper()->unregisterHandler(mClientInfo.mPlaybackSession->id());
@@ -1727,6 +1983,10 @@ void WifiDisplaySource::disconnectClient2() {
         mNetSession->destroySession(mClientSessionID);
         mClientSessionID = 0;
     }
+    if (mUibcTouchFd >= 0) {
+        close(mUibcTouchFd);
+        mUibcTouchFd = -1;
+    }
 
     mClient->onDisplayDisconnected();
 
diff --git a/media/libstagefright/wifi-display/source/WifiDisplaySource.h b/media/libstagefright/wifi-display/source/WifiDisplaySource.h
index 47ef099..702c255 100644
--- a/media/libstagefright/wifi-display/source/WifiDisplaySource.h
+++ b/media/libstagefright/wifi-display/source/WifiDisplaySource.h
@@ -1,5 +1,6 @@
 /*
  * Copyright 2012, The Android Open Source Project
+ * Copyright (C) 2014 Freescale Semiconductor, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,8 +23,14 @@
 
 #include <media/stagefright/foundation/AHandler.h>
 #include <media/stagefright/foundation/ANetworkSession.h>
-
+#include <media/stagefright/foundation/ABuffer.h>
 #include <netinet/in.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <linux/input.h>
+#include <dirent.h>
+#include <errno.h>
+#include <stdlib.h>
 
 namespace android {
 
@@ -42,9 +49,12 @@ struct WifiDisplaySource : public AHandler {
             const char *path = NULL);
 
     status_t start(const char *iface);
+    status_t parseUIBC(const uint8_t *d);
+    status_t onUIBCData(const sp<ABuffer> &buffer);
     status_t startUibc(const int32_t port);
     status_t stop();
-
+    status_t sendtouchevent(int32_t action, int32_t x, int32_t y);
+    status_t sendkeyevent(int16_t action, int16_t keycode);
     status_t pause();
     status_t resume();
 
@@ -123,7 +133,12 @@ private:
     struct in_addr mInterfaceAddr;
     int32_t mSessionID;
     int32_t mUibcSessionID;
-
+    int32_t mUibcTouchFd;
+    int32_t mUibcKeyFd;
+    int32_t mAbs_x_min;
+    int32_t mAbs_x_max;
+    int32_t mAbs_y_min;
+    int32_t mAbs_y_max;
     uint32_t mStopReplyID;
 
     AString mWfdClientRtpPorts;
@@ -267,10 +282,27 @@ private:
     void finishStop2();
 
     void finishPlay();
-
+    int scan_dir(const char *dirname);
+    int open_dev(const char *deviceName);
+    int write_event(int fd, int type, int code, int value);
+    void calculateXY(float x, float y, int *abs_x, int *abs_y);
+    int containsNonZeroByte(const uint8_t* array, uint32_t startIndex, uint32_t endIndex);
     DISALLOW_EVIL_CONSTRUCTORS(WifiDisplaySource);
 };
 
+    //UIBC magic numbers
+    const int32_t DEFAULT_UIBC_PORT = 7239;
+    const int16_t INPUT_CATEGORY_GENERIC = 0x00;
+    const int16_t INPUT_CATEGORY_HIDC = 0x01;
+    const int16_t TOUCH_ACTION_DOWN = 0;
+    const int16_t TOUCH_ACTION_UP = 1;
+    const int16_t TOUCH_ACTION_MOVE = 2;
+    const int16_t TOUCH_ACTION_CANCEL = 3;
+    const int16_t TOUCH_ACTION_POINTER_DOWN = 5;
+    const int16_t TOUCH_ACTION_POINTER_UP = 6;
+    const int16_t KEY_ACTION_DOWN = 3;
+    const int16_t KEY_ACTION_UP = 4;
+
 }  // namespace android
 
 #endif  // WIFI_DISPLAY_SOURCE_H_
-- 
1.8.0

