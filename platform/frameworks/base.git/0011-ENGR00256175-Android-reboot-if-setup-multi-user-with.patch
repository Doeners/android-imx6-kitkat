From 82ce049e346851b5cdc067a7b1a28290bd34aebd Mon Sep 17 00:00:00 2001
From: "guoyin.chen" <guoyin.chen@freescale.com>
Date: Thu, 28 Mar 2013 17:05:26 +0800
Subject: [PATCH 11/37] ENGR00256175 Android reboot if setup multi-user with
 space running out

Create new user if there is enough space(32M) in data partition.

Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 .../java/com/android/server/pm/UserManagerService.java | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/services/java/com/android/server/pm/UserManagerService.java b/services/java/com/android/server/pm/UserManagerService.java
index c33134a..24ca318 100644
--- a/services/java/com/android/server/pm/UserManagerService.java
+++ b/services/java/com/android/server/pm/UserManagerService.java
@@ -35,6 +35,7 @@ import android.graphics.BitmapFactory;
 import android.os.Binder;
 import android.os.Bundle;
 import android.os.Environment;
+import android.os.StatFs;
 import android.os.FileUtils;
 import android.os.Handler;
 import android.os.IUserManager;
@@ -124,6 +125,7 @@ public class UserManagerService extends IUserManager.Stub {
     // Amount of time to force the user to wait before entering the PIN again, after failing
     // BACKOFF_INC_INTERVAL times.
     private static final int[] BACKOFF_TIMES = { 0, 30*1000, 60*1000, 5*60*1000, 30*60*1000 };
+    private static final long MIN_AVAILABLE_SPACE = 32 * 1024 * 1024;
 
     private final Context mContext;
     private final PackageManagerService mPm;
@@ -432,6 +434,21 @@ public class UserManagerService extends IUserManager.Stub {
     }
 
     /**
+     * Check if we've enough space for new user.
+     */
+    private static final boolean isNoFreeSpace() {
+        final String path = Environment.getDataDirectory().getPath();
+        StatFs fileStats = new StatFs(path);
+        long restM = fileStats.getAvailableBlocks() * fileStats.getBlockSize();
+        Slog.w(LOG_TAG, "remain size for data is " + restM);
+        if ( restM < MIN_AVAILABLE_SPACE)
+            return true;
+        else
+            return false;
+    }
+
+
+    /**
      * Enforces that only the system UID or root's UID or apps that have the
      * {@link android.Manifest.permission.MANAGE_USERS MANAGE_USERS}
      * permission can make certain calls to the UserManager.
@@ -944,6 +961,7 @@ public class UserManagerService extends IUserManager.Stub {
             synchronized (mInstallLock) {
                 synchronized (mPackagesLock) {
                     if (isUserLimitReachedLocked()) return null;
+                    if (isNoFreeSpace()) return null;
                     int userId = getNextAvailableIdLocked();
                     userInfo = new UserInfo(userId, name, null, flags);
                     File userPath = new File(mBaseUserPath, Integer.toString(userId));
-- 
1.8.0

